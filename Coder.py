import numpy as np

huffman_dc_luminance = {
    0: (0b00, 2),
    1: (0b010, 3),
    2: (0b011, 3),
    3: (0b100, 3),
    4: (0b101, 3),
    5: (0b110, 3),
    6: (0b1110, 4),
    7: (0b11110, 5),
    8: (0b111110, 6),
    9: (0b1111110, 7),
    10: (0b11111110, 8),
    11: (0b111111110, 9)
}

huffman_ac_luminance = {
    (0, 0): (0b1010, 4),
    (0, 1): (0b00, 2),
    (0, 2): (0b01, 2),
    (0, 3): (0b100, 3),
    (0, 4): (0b1011, 4),
    (0, 5): (0b11010, 5),
    (0, 6): (0b1111000, 7),
    (0, 7): (0b11111000, 8),
    (0, 8): (0b1111110110, 10),
    (0, 9): (0b1111111110000010, 16),
    (0, 10): (0b1111111110000011, 16),
    (1, 1): (0b1100, 4),
    (1, 2): (0b11011, 5),
    (1, 3): (0b1111001, 7),
    (1, 4): (0b111110110, 9),
    (1, 5): (0b11111110110, 11),
    (1, 6): (0b1111111110000100, 16),
    (1, 7): (0b1111111110000101, 16),
    (1, 8): (0b1111111110000110, 16),
    (1, 9): (0b1111111110000111, 16),
    (1, 10): (0b1111111110001000, 16),
    (2, 1): (0b11100, 5),
    (2, 2): (0b11111001, 8),
    (2, 3): (0b1111110111, 10),
    (2, 4): (0b111111110100, 12),
    (2, 5): (0b1111111110001001, 16),
    (2, 6): (0b1111111110001010, 16),
    (2, 7): (0b1111111110001011, 16),
    (2, 8): (0b1111111110001100, 16),
    (2, 9): (0b1111111110001101, 16),
    (2, 10): (0b1111111110001110, 16),
    (3, 1): (0b111010, 6),
    (3, 2): (0b111110111, 9),
    (3, 3): (0b111111110101, 12),
    (3, 4): (0b1111111110001111, 16),
    (3, 5): (0b1111111110010000, 16),
    (3, 6): (0b1111111110010001, 16),
    (3, 7): (0b1111111110010010, 16),
    (3, 8): (0b1111111110010011, 16),
    (3, 9): (0b1111111110010100, 16),
    (3, 10): (0b1111111110010101, 16),
    (4, 1): (0b111011, 6),
    (4, 2): (0b1111111000, 10),
    (4, 3): (0b1111111110010110, 16),
    (4, 4): (0b1111111110010111, 16),
    (4, 5): (0b1111111110011000, 16),
    (4, 6): (0b1111111110011001, 16),
    (4, 7): (0b1111111110011010, 16),
    (4, 8): (0b1111111110011011, 16),
    (4, 9): (0b1111111110011100, 16),
    (4, 10): (0b1111111110011101, 16),
    (5, 1): (0b1111010, 7),
    (5, 2): (0b11111110111, 11),
    (5, 3): (0b1111111110011110, 16),
    (5, 4): (0b1111111110011111, 16),
    (5, 5): (0b1111111110100000, 16),
    (5, 6): (0b1111111110100001, 16),
    (5, 7): (0b1111111110100010, 16),
    (5, 8): (0b1111111110100011, 16),
    (5, 9): (0b1111111110100100, 16),
    (5, 10): (0b1111111110100101, 16),
    (6, 1): (0b1111011, 7),
    (6, 2): (0b111111110110, 12),
    (6, 3): (0b1111111110100110, 16),
    (6, 4): (0b1111111110100111, 16),
    (6, 5): (0b1111111110101000, 16),
    (6, 6): (0b1111111110101001, 16),
    (6, 7): (0b1111111110101010, 16),
    (6, 8): (0b1111111110101011, 16),
    (6, 9): (0b1111111110101100, 16),
    (6, 10): (0b1111111110101101, 16),
    (7, 1): (0b11111010, 8),
    (7, 2): (0b111111110111, 12),
    (7, 3): (0b1111111110101110, 16),
    (7, 4): (0b1111111110101111, 16),
    (7, 5): (0b1111111110110000, 16),
    (7, 6): (0b1111111110110001, 16),
    (7, 7): (0b1111111110110010, 16),
    (7, 8): (0b1111111110110011, 16),
    (7, 9): (0b1111111110110100, 16),
    (7, 10): (0b1111111110110101, 16),
    (8, 1): (0b111111000, 9),
    (8, 2): (0b111111111000000, 15),
    (8, 3): (0b1111111110110110, 16),
    (8, 4): (0b1111111110110111, 16),
    (8, 5): (0b1111111110111000, 16),
    (8, 6): (0b1111111110111001, 16),
    (8, 7): (0b1111111110111010, 16),
    (8, 8): (0b1111111110111011, 16),
    (8, 9): (0b1111111110111100, 16),
    (8, 10): (0b1111111110111101, 16),
    (9, 1): (0b111111001, 9),
    (9, 2): (0b1111111110111110, 16),
    (9, 3): (0b1111111110111111, 16),
    (9, 4): (0b1111111111000000, 16),
    (9, 5): (0b1111111111000001, 16),
    (9, 6): (0b1111111111000010, 16),
    (9, 7): (0b1111111111000011, 16),
    (9, 8): (0b1111111111000100, 16),
    (9, 9): (0b1111111111000101, 16),
    (9, 10): (0b1111111111000110, 16),
    (10, 1): (0b111111010, 9),
    (10, 2): (0b1111111111000111, 16),
    (10, 3): (0b1111111111001000, 16),
    (10, 4): (0b1111111111001001, 16),
    (10, 5): (0b1111111111001010, 16),
    (10, 6): (0b1111111111001011, 16),
    (10, 7): (0b1111111111001100, 16),
    (10, 8): (0b1111111111001101, 16),
    (10, 9): (0b1111111111001110, 16),
    (10, 10): (0b1111111111001111, 16),
    (11, 1): (0b1111111001, 10),
    (11, 2): (0b1111111111010000, 16),
    (11, 3): (0b1111111111010001, 16),
    (11, 4): (0b1111111111010010, 16),
    (11, 5): (0b1111111111010011, 16),
    (11, 6): (0b1111111111010100, 16),
    (11, 7): (0b1111111111010101, 16),
    (11, 8): (0b1111111111010110, 16),
    (11, 9): (0b1111111111010111, 16),
    (11, 10): (0b1111111111011000, 16),
    (12, 1): (0b1111111010, 10),
    (12, 2): (0b1111111111011001, 16),
    (12, 3): (0b1111111111011010, 16),
    (12, 4): (0b1111111111011011, 16),
    (12, 5): (0b1111111111011100, 16),
    (12, 6): (0b1111111111011101, 16),
    (12, 7): (0b1111111111011110, 16),
    (12, 8): (0b1111111111011111, 16),
    (12, 9): (0b1111111111100000, 16),
    (12, 10): (0b1111111111100001, 16),
    (13, 1): (0b11111111000, 11),
    (13, 2): (0b1111111111100010, 16),
    (13, 3): (0b1111111111100011, 16),
    (13, 4): (0b1111111111100100, 16),
    (13, 5): (0b1111111111100101, 16),
    (13, 6): (0b1111111111100110, 16),
    (13, 7): (0b1111111111100111, 16),
    (13, 8): (0b1111111111101000, 16),
    (13, 9): (0b1111111111101001, 16),
    (13, 10): (0b1111111111101010, 16),
    (14, 1): (0b111111111101011, 15),
    (14, 2): (0b1111111111101100, 16),
    (14, 3): (0b1111111111101101, 16),
    (14, 4): (0b11111111101110, 14),
    (14, 5): (0b1111111111101111, 16),
    (14, 6): (0b1111111111110000, 16),
    (14, 7): (0b1111111111110001, 16),
    (14, 8): (0b1111111111110010, 16),
    (14, 9): (0b1111111111110011, 16),
    (14, 10): (0b1111111111110100, 16),
    (15, 0): (0b11111111001, 11),
    (15, 1): (0b1111111111110101, 16),
    (15, 2): (0b1111111111110110, 16),
    (15, 3): (0b1111111111110111, 16),
    (15, 4): (0b1111111111111000, 16),
    (15, 5): (0b1111111111111001, 16),
    (15, 6): (0b1111111111111010, 16),
    (15, 7): (0b1111111111111011, 16),
    (15, 8): (0b1111111111111100, 16),
    (15, 9): (0b1111111111111101, 16),
    (15, 10): (0b1111111111111110, 16)
}

huffman_dc_chrominance = {
    0: (0b00, 2),
    1: (0b01, 2),
    2: (0b10, 2),
    3: (0b110, 3),
    4: (0b1110, 4),
    5: (0b11110, 5),
    6: (0b111110, 6),
    7: (0b1111110, 7),
    8: (0b11111110, 8),
    9: (0b111111110, 9),
    10: (0b1111111110, 10),
    11: (0b11111111110, 11)
}

huffman_ac_chrominance = {
    (0, 0): (0b00, 2),
    (0, 1): (0b01, 2),
    (0, 2): (0b100, 3),
    (0, 3): (0b1010, 4),
    (0, 4): (0b11000, 5),
    (0, 5): (0b11001, 5),
    (0, 6): (0b111000, 6),
    (0, 7): (0b1111000, 7),
    (0, 8): (0b111110100, 9),
    (0, 9): (0b1111110110, 10),
    (0, 10): (0b111111110100, 12),
    (1, 1): (0b1011, 4),
    (1, 2): (0b111001, 6),
    (1, 3): (0b11110110, 8),
    (1, 4): (0b111110101, 9),
    (1, 5): (0b11111110110, 11),
    (1, 6): (0b111111110101, 12),
    (1, 7): (0b111111110001000, 15),
    (1, 8): (0b1111111110001001, 16),
    (1, 9): (0b111111110001010, 15),
    (1, 10): (0b1111111110001011, 16),
    (2, 1): (0b11010, 5),
    (2, 2): (0b11110111, 8),
    (2, 3): (0b1111110111, 10),
    (2, 4): (0b111111110110, 12),
    (2, 5): (0b111111111000010, 15),
    (2, 6): (0b111111110001100, 15),
    (2, 7): (0b1111111110001101, 16),
    (2, 8): (0b1111110001110, 13),
    (2, 9): (0b1111111110001111, 16),
    (2, 10): (0b1111111110010000, 16),
    (3, 1): (0b11011, 5),
    (3, 2): (0b11111000, 8),
    (3, 3): (0b1111111000, 10),
    (3, 4): (0b111111110111, 12),
    (3, 5): (0b1111111110010001, 16),
    (3, 6): (0b111111110010010, 15),
    (3, 7): (0b111111110010011, 15),
    (3, 8): (0b1111111110010100, 16),
    (3, 9): (0b111110010101, 12),
    (3, 10): (0b1111111110010110, 16),
    (4, 1): (0b111010, 6),
    (4, 2): (0b111110110, 9),
    (4, 3): (0b1111111110010111, 16),
    (4, 4): (0b1111111110011000, 16),
    (4, 5): (0b1111111110011001, 16),
    (4, 6): (0b1111111110011010, 16),
    (4, 7): (0b1111111110011011, 16),
    (4, 8): (0b1111111110011100, 16),
    (4, 9): (0b1111111110011101, 16),
    (4, 10): (0b1111111110011110, 16),
    (5, 1): (0b111011, 6),
    (5, 2): (0b1111111001, 10),
    (5, 3): (0b1111111110011111, 16),
    (5, 4): (0b1111111110100000, 16),
    (5, 5): (0b1111111110100001, 16),
    (5, 6): (0b1111111110100010, 16),
    (5, 7): (0b1111111110100011, 16),
    (5, 8): (0b1111111110100100, 16),
    (5, 9): (0b1111111110100101, 16),
    (5, 10): (0b1111111110100110, 16),
    (6, 1): (0b1111001, 7),
    (6, 2): (0b11111110111, 11),
    (6, 3): (0b1111111110100111, 16),
    (6, 4): (0b1111111110101000, 16),
    (6, 5): (0b1111111110101001, 16),
    (6, 6): (0b1111111110101010, 16),
    (6, 7): (0b1111111110101011, 16),
    (6, 8): (0b1111111110101100, 16),
    (6, 9): (0b1111111110101101, 16),
    (6, 10): (0b1111111110101110, 16),
    (7, 1): (0b1111010, 7),
    (7, 2): (0b11111111000, 11),
    (7, 3): (0b1111111110101111, 16),
    (7, 4): (0b1111111110110000, 16),
    (7, 5): (0b1111111110110001, 16),
    (7, 6): (0b1111111110110010, 16),
    (7, 7): (0b1111111110110011, 16),
    (7, 8): (0b1111111110110100, 16),
    (7, 9): (0b1111111110110101, 16),
    (7, 10): (0b1111111110110110, 16),
    (8, 1): (0b11111001, 8),
    (8, 2): (0b1111111110110111, 16),
    (8, 3): (0b1111111110111000, 16),
    (8, 4): (0b1111111110111001, 16),
    (8, 5): (0b1111111110111010, 16),
    (8, 6): (0b1111111110111011, 16),
    (8, 7): (0b111111110111100, 15),
    (8, 8): (0b111111110111101, 15),
    (8, 9): (0b11111110111110, 14),
    (8, 10): (0b1111111110111111, 16),
    (9, 1): (0b111110111, 9),
    (9, 2): (0b111111111000000, 15),
    (9, 3): (0b111111111000001, 15),
    (9, 4): (0b11111111000010, 14),
    (9, 5): (0b111111111000011, 15),
    (9, 6): (0b111111111000100, 15),
    (9, 7): (0b111111111000101, 15),
    (9, 8): (0b11111111000110, 14),
    (9, 9): (0b111111111000111, 15),
    (9, 10): (0b111111111001000, 15),
    (10, 1): (0b111111000, 9),
    (10, 2): (0b111111111001001, 15),
    (10, 3): (0b11111111001010, 14),
    (10, 4): (0b111111111001011, 15),
    (10, 5): (0b111111111001100, 15),
    (10, 6): (0b111111111001101, 15),
    (10, 7): (0b111111111001110, 15),
    (10, 8): (0b111111111001111, 15),
    (10, 9): (0b1111111010000, 13),
    (10, 10): (0b111111111010001, 15),
    (11, 1): (0b11111001, 8),
    (11, 2): (0b111111111010010, 15),
    (11, 3): (0b11111111010011, 14),
    (11, 4): (0b111111111010100, 15),
    (11, 5): (0b111111111010101, 15),
    (11, 6): (0b111111111010110, 15),
    (11, 7): (0b111111111010111, 15),
    (11, 8): (0b111111011000, 12),
    (11, 9): (0b111111111011001, 15),
    (11, 10): (0b111111111011010, 15),
    (12, 1): (0b111111010, 9),
    (12, 2): (0b111111111011011, 15),
    (12, 3): (0b11111111011100, 14),
    (12, 4): (0b1111111011101, 13),
    (12, 5): (0b11111011110, 11),
    (12, 6): (0b11111111011111, 14),
    (12, 7): (0b11111111100000, 14),
    (12, 8): (0b111111100001, 12),
    (12, 9): (0b1111111100010, 13),
    (12, 10): (0b11111111100011, 14),
    (13, 1): (0b11111111001, 11),
    (13, 2): (0b11111111100100, 14),
    (13, 3): (0b11111111100101, 14),
    (13, 4): (0b111111100110, 12),
    (13, 5): (0b111111100111, 12),
    (13, 6): (0b11111101000, 11),
    (13, 7): (0b111111101001, 12),
    (13, 8): (0b111111101010, 12),
    (13, 9): (0b1111111101011, 13),
    (13, 10): (0b11111111101100, 14),
    (14, 1): (0b11111100000, 11),
    (14, 2): (0b1111111101101, 13),
    (14, 3): (0b11111101110, 11),
    (14, 4): (0b1111111101111, 13),
    (14, 5): (0b11111110000, 11),
    (14, 6): (0b11111110001, 11),
    (14, 7): (0b11111110010, 11),
    (14, 8): (0b11111110011, 11),
    (14, 9): (0b111111110100, 12),
    (14, 10): (0b1111111110101, 13),
    (15, 0): (0b1111111010, 10),
    (15, 1): (0b11111111000011, 14),
    (15, 2): (0b1111111110110, 13),
    (15, 3): (0b1111110111, 10),
    (15, 4): (0b111111000, 9),
    (15, 5): (0b11111001, 8),
    (15, 6): (0b1111111010, 10),
    (15, 7): (0b1111111011, 10),
    (15, 8): (0b111111100, 9),
    (15, 9): (0b1111111101, 10),
    (15, 10): (0b1111111110, 10),
}


def diff(data):
    for i in range(len(data) - 1, 0, -1):
        data[i][0] = data[i][0] - data[i - 1][0]
    return data


def back_diff(data):
    for i in range(1, len(data)):
        data[i][0] = data[i][0] + data[i - 1][0]
    return data


def category(val):
    return 0 if val == 0 else int(np.floor(np.log2(abs(val)))) + 1


def encode_value(val, category):
    if category == 0:
        return ''
    if val >= 0:
        return format(val, f'0{category}b')
    else:
        # Инверсия значения по JPEG: 2^n - 1 + val
        max_val = (1 << category) - 1
        encoded = max_val + val  # т.к. val < 0
        return format(encoded, f'0{category}b')


def decode_value(bits: str, category: int):
    if category == 0:
        return 0
    if bits[0] == '1':
        # положительное число
        return int(bits, 2)
    else:
        # отрицательное число по JPEG-правилам
        return int(bits, 2) - (1 << category) + 1


def run_lenght(data, ha):
    rl = []
    zero_counter = 0
    for i in data:
        if i != 0 or zero_counter == 15:
            cat = category(i)
            ha_code, ha_len = ha[zero_counter, cat]
            ac_help = encode_value(i, cat)
            rl.append(format(ha_code, f'0{ha_len}b') + ac_help)
            zero_counter = 0
        else:
            zero_counter += 1
    eob_code, eob_len = ha[(0, 0)]
    rl.append(format(eob_code, f'0{eob_len}b'))
    return rl


def bits_to_bytes_with_padding(bits, valid_bits=None):
    bitstream = ''.join(bits)
    if valid_bits:
        bitstream = bitstream[:valid_bits]
    padding = (8 - len(bitstream) % 8) % 8
    bitstream_padded = bitstream + '0' * padding
    byte_data = bytearray(int(bitstream_padded[i:i + 8], 2) for i in range(0, len(bitstream_padded), 8))
    padding_byte = padding.to_bytes(1, 'big')
    byte_data = padding_byte + byte_data

    return byte_data


def decode_bytes_with_padding(byte_data):
    padding = byte_data[0]
    byte_data = byte_data[1:]
    bitstream = ''.join(f'{byte:08b}' for byte in byte_data)
    bitstream = bitstream[:-padding] if padding else bitstream
    return bitstream


def encoding_blocks(data, chrominance=0):
    height, width = data[0]
    num_blocks = len(data) - 1
    data = data[1::]
    d = diff(data)

    if chrominance == 0:
        dc_ha = huffman_dc_luminance
        ac_ha = huffman_ac_luminance
    else:
        dc_ha = huffman_dc_chrominance
        ac_ha = huffman_ac_chrominance

    bitstream = []

    for block in d:
        dc_category = category(block[0])
        DC_code, DC_len = dc_ha[dc_category]
        DC_help = encode_value(block[0], dc_category)
        DC = format(DC_code, f'0{DC_len}b') + DC_help

        block_rl = [DC] + run_lenght(block[1::], ac_ha)
        bitstream.extend(block_rl)

    bitstream = ''.join(bitstream)

    # header = (
    #         height.to_bytes(2, 'big') +
    #         width.to_bytes(2, 'big') +
    #         num_blocks.to_bytes(2, 'big')
    # )
    return str(height) + str(width) + str(num_blocks) + bitstream


def decoding_blocks(data, chrominance=0):
    height = int(data[0:3])
    width = int(data[3:6])
    num_blocks = int(data[6:10])

    bitstream = data[10::]

    if chrominance == 0:
        dc_ha = huffman_dc_luminance
        ac_ha = huffman_ac_luminance
    else:
        dc_ha = huffman_dc_chrominance
        ac_ha = huffman_ac_chrominance

    dc_ha_inv = {format(v[0], f'0{v[1]}b'): k for k, v in dc_ha.items()}
    ac_ha_inv = {format(v[0], f'0{v[1]}b'): k for k, v in ac_ha.items()}

    blocks = []
    pos = 0
    for _ in range(num_blocks):
        block = [0] * 64

        # --- DC decoding ---
        dc_key = ''
        while dc_key not in dc_ha_inv:
            if pos >= len(bitstream):
                raise ValueError("Недостаточно данных при декодировании DC")
            dc_key += bitstream[pos]
            pos += 1

        dc_category = dc_ha_inv[dc_key]
        dc_val_bits = bitstream[pos:pos + dc_category]
        pos += dc_category
        block[0] = decode_value(dc_val_bits, dc_category)

        # --- AC decoding ---
        i = 1
        while i < 64:
            ac_key = ''
            while ac_key not in ac_ha_inv:
                if pos >= len(bitstream):
                    raise ValueError("Недостаточно данных при декодировании AC")
                ac_key += bitstream[pos]
                pos += 1

            run, size = ac_ha_inv[ac_key]
            if (run, size) == (0, 0):  # EOB
                break
            i += run
            if i >= 64:
                break  # или можно выдать ошибку или предупреждение
            val_bits = bitstream[pos:pos + size]
            pos += size
            block[i] = decode_value(val_bits, size)
            i += 1

        print(block)
        blocks.append(block)

    back_diff(blocks)

    return [(height, width)] + blocks
